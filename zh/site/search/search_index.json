{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u4e3b\u9875","text":"<p>1. Detailed description of the basic instruction set</p> <p>Detailed instruction set description is as described in the following sections.Modbus RTU is hexadecimal and must be filled in by converting decimal to hexadecimal when filling in the instructions, including register addresses etc. The instruction address in parentheses in the protocol is in hexadecimal. The instruction address in parentheses in the protocol is in decimal, and the user must convert it to hexadecimal when writing the instruction, for example, the address in parentheses is 036, which is converted to hexadecimal as 24.</p>"},{"location":"adv-settings/","title":"\u9ad8\u7ea7\u8bbe\u7f6e","text":""},{"location":"adv-settings/#32-ad-conversion-speed","title":"<code>32</code> AD conversion speed","text":"<p>The default AD conversion speeds of different versions of transmitters are different, the high speed version AD conversion speed is 0x07:800, the medium speed version is 0x04:120, and the low speed version is 0x02:640, take the low speed version as an example, when the default speed 0x02:640 is changed to 0x03:1280</p> <p>Command: <code>01 10 00 20 00 01 02 00 02 20 F1</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         20 00                   01 02 00             02 20              F1 <p>Return data: <code>01 10 00 20 00 01 00 03</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         20 00                   01 00              03 <p>The conversion of analog signals to digital signals, referred to as AD conversion, the faster the AD conversion, the lower the sampling accuracy.</p> <p>The AD sampling rate is the detection speed of the weighing equipment for the weight of the items on the platform, usually between a few times per second to several hundred times, high-speed weighing applications, up to several thousand times, for an established weighing equipment, the faster the AD rate, the worse the accuracy of the data detected by the AD will be, and the slower the rate of the AD, the higher the accuracy of the AD detection will be relative. Therefore, according to the real weighing needs on the rate, reasonable choice can meet the needs of the lowest gear rate for AD sampling, can maximize the detection accuracy, so as to achieve the best balance on the speed and accuracy.</p>"},{"location":"adv-settings/#34-filter-types","title":"<code>34</code> Filter types","text":"<p>Default is 09: Sliding Average Filtering+ First Order Filtering, change to 08: Median Filtering+ First Order Filtering when Command: <code>01 10 00 22 00 01 02 00 08 A1 14</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         22 00                   01 02 00             08 A1              14 <p>Return data: <code>01 10 00 22 00 01 A1 C3</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         22 00                   01 A1              C3 <p>Select the appropriate filtering method according to different applications</p> <pre><code>0x00:Not used 0x01:Mean value filtering  \n0x02:Median Filter 0x03:First Order Filter  \n0x04:Sliding average filter 0x05:Median value average filter  \n0x06:Sliding Median Filter  \n0x07:Mean filter + First order filter  \n0x08:Median Filter + First Order Filter  \n0x09:Sliding Average Filter + First Order Filter  \n0x0A:median mean filter + first order filter\n</code></pre>"},{"location":"adv-settings/#35-baud-intensity","title":"<code>35</code> baud intensity","text":"<p>When baud strength is changed to 10</p> <p>Command: <code>01 10 00 23 00 01 02 00 10 A0 CF</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         23 00                   01 02 00             10 A0              CF <p>Return data: <code>01 10 00 23 00 01 F0 03</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         23 00                   01 F0              03 <p>Range: 0\\~50, the larger the number, the stronger the filtering</p> <p>Filter strength: AD sampling data, due to a variety of reasons, often mixed with a variety of noise from different reasons in which, in order to get a weighing data as close as possible to the real weighing data, weighing equipment will be used in the way of digital filtering data signal processing, and the AD filter strength is an important parameter of the data processing, in general, the smaller the filter strength, the faster the response speed of the data output signal, but the effect of noise filtering is also worse; while the larger the filter strength, the slower the response speed of the output signal, but the effect of noise filtering will be better, between the response speed and filtering effect is reasonable. Generally speaking, the smaller the filter strength, the faster the response of the data output signal, but the worse the effect of noise filtering; and the larger the filter strength, the slower the response of the output signal, but for the effect of noise filtering will be the better, between the response speed and filtering effect, reasonable trade-offs, looking for the optimal balance point, is to use a good weighing equipment is a key step, there is no definite standard, the need for users to do a trade-off based on the site, whether it is the speed priority, or stability priority, according to the customer\\'s actual situation, or the stability priority, according to the customer\\'s actual situation. There is no definite standard, users need to make a trade-off according to the site conditions, whether it is speed priority, or stability priority, according to the actual needs of customers.</p>"},{"location":"adv-settings/#93-manual-zeroing-range","title":"<code>93</code> Manual zeroing range","text":"<p>Command: <code>01 10 00 5D 00 01 02 00 0A 2B 1A</code> (set 10%)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         5D 00                   01 02 00             0A 2B              1A <p>Return data: <code>01 10 00 5D 00 01 90 1B</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         5D 00                   01 90              1B <p>Manual zero setting is to allow the weighing equipment to take the current weighing data as the current zero point through external keys or commands. As long as the current weighing value does not exceed the range of manual zero setting, the weighing equipment will show the zero reset immediately when the manual zero setting is executed.</p>"},{"location":"adv-settings/#94-perform-manual-zeroing","title":"<code>94</code> Perform manual zeroing","text":"<p>Command: <code>01 10 00 5E 00 01 02 00 01 6A EE</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         5E 00                   01 02 00             01 6A              EE <p>Return data: <code>01 10 00 5E 00 01 60 1B</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         5E 00                   01 60              1B <p>When multiple channels of transmitters are zeroed simultaneously, the command is <code>01 10 00 5E 00 01 02 00 FF EB 6E</code></p>"},{"location":"adv-settings/#95-power-on-zero-setting-range","title":"<code>95</code> Power-on zero setting range","text":"<p>Command: <code>01 10 00 5F 00 01 02 00 0A 2A F8</code> (set 10%)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         5F 00                   01 02 00             0A 2A              F8 <p>Return data: <code>01 10 00 5F 00 01 31 DB</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         5F 00                   01 31              DB"},{"location":"adv-settings/#96-setting-the-automatic-zero-tracking-range","title":"<code>96</code> Setting the automatic zero tracking range","text":"<p>Command: <code>01 10 00 60 00 01 02 00 64 AE 1B</code> (when 10d is set)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         60 00                   01 02 00             64 AE              1B <p>Return data: <code>01 10 00 60 00 01 01 D7</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         60 00                   01 01              D7 <p>Parameter range: 0\\~10000; unit: 0.1d; zero tracking function is turned off when setting 0</p> <p>When the weighing equipment is turned on and in use, the AD signal output will drift because of various reasons such as AD temperature drift, sensor temperature drift creep, etc. The zero tracking calibration program in the equipment will automatically track this very slow drift to offset it, but the zero tracking method has a speed and range.</p>"},{"location":"adv-settings/#97-setting-the-automatic-zero-tracking-time","title":"<code>97</code> Setting the automatic zero tracking time","text":"<p>Command: <code>01 10 00 61 00 01 02 00 0A 2E 26</code> (when setting 1s)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         61 00                   01 02 00             0A 2E              26 <p>Return data: <code>01 10 00 61 00 01 50 17</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         61 00                   01 50              17"},{"location":"adv-settings/#98-stabilization-range","title":"<code>98</code> Stabilization range","text":"<p>Command: <code>01 10 00 62 00 01 02 00 0A 2E 15</code> (when 10d is set)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         62 00                   01 02 00             0A 2E              15 <p>Return data: <code>01 10 00 62 00 01 A0 17</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         62 00                   01 A0              17"},{"location":"adv-settings/#99-stabilization-time","title":"<code>99</code> Stabilization time","text":"<p>Command: <code>01 10 00 63 00 01 02 00 0A 2F C4</code> (when setting 1s)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         63 00                   01 02 00             0A 2F              C4 <p>Return data: <code>01 10 00 63 00 01 F1 D7</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         63 00                   01 F1              D7"},{"location":"adv-settings/#100-zero-point-range","title":"<code>100</code> Zero Point Range","text":"<p>Command: <code>01 10 00 64 00 02 04 00 00 00 0A 74 73</code> (when 10 is set)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         64 00                   02 04 00             0A 74              73 <p>Return data: <code>01 10 00 64 00 02 00 17</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         64 00                   02 00              17"},{"location":"adv-settings/#102-creep-tracking-range","title":"<code>102</code> Creep tracking range","text":"<p>Command: <code>01 10 00 66 00 01 02 00 64 AE 7D</code> (when 10d is set)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         66 00                   01 02 00             64 AE              7D <p>Return data: <code>01 10 00 66 00 01 E1 D6</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         66 00                   01 E1              D6"},{"location":"adv-settings/#103-creep-tracking-time","title":"<code>103</code> Creep tracking time","text":"<p>Command: <code>01 10 00 67 00 01 02 00 0A 2E 40</code> (when setting 1s)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         67 00                   01 02 00             0A 2E              40 <p>Return data: <code>01 10 00 67 00 01 B0 16</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         67 00                   01 B0              16"},{"location":"adv-settings/#104-weight-units","title":"<code>104</code> Weight units","text":"<p>Command: <code>01 10 00 68 00 01 02 00 01 6F 78</code> (when setting 1-g)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         68 00                   01 02 00             01 6F              78 <p>Return data: <code>01 10 00 68 00 01 80 15</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         68 00                   01 80              15"},{"location":"adv-settings/#36-15-code-value-within-zero-point","title":"<code>36</code> 15 Code value within zero point","text":"<p>Command: <code>01 10 00 24 00 02 04 7F FF FF FF FF 10 D8</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         24 00                   02 04 7F                         FF FF                        FF 10              D8 <p>Return data: <code>01 10 00 24 00 02 01 C3</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         24 00                   02 01              C3 <p>AD internal code value corresponding to zero point; range:-8000000\\~8000000 Write:0x7fffffff to set the current internal code to the zero internal code</p> <p>The zero point is the reference point for weighing, and the weight added or subtracted from this reference point is the actual weighed weight. Zero point calibration, as the name suggests, is a zero point recorded as a benchmark during calibration, and then the weight calibration done on this basis.</p>"},{"location":"adv-settings/#61-number-of-multipoint-amendments","title":"<code>61</code> Number of multipoint amendments","text":"<p>Command: <code>01 03 00 3D 00 01 15 C6</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 03 00                         3D 00                   01 15              C6 <p>Return data: <code>01 03 02 00 00 B8 44</code></p> module address function code byte count register data CRC16 checksum 01 03 02 00             00 B4              44 <p>This register is read-only. Reading this register returns the number of internal multipoint corrections; writing this register is invalid.</p>"},{"location":"adv-settings/#62-nth-point-internal-code-value","title":"<code>62</code> Nth point internal code value","text":"<p>Command: <code>01 10 00 3E 00 02 04 7F FF FF FF FF 59 63</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         3E 00                   02 04 7F                         FF FF                        FF 59              63 <p>Return data: <code>01 10 00 3E 00 02 20 04</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         3E 00                   02 20              04 <p>The value of AD internal code corresponding to the Nth point; Range:-8000000\\~8000000; If 0x7fffffff is written to this register, it will be replaced by the current AD internal code value;</p>"},{"location":"adv-settings/#64-point-n-weight-value","title":"<code>64</code> Point N weight value","text":"<p>Command: <code>01 10 00 40 00 02 04 00 01 00 00 A6 5F</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         40 00                   02 04 00                         01 00                        02 A6              5F <p>Return data: <code>01 10 00 40 00 02 40 1C</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         40 00                   02 40              1C <p>Measured value corresponding to the Nth point; Range: -8000000\\~8000000.</p>"},{"location":"adv-settings/#66-insert-correction","title":"<code>66</code> Insert correction","text":"<p>Command: <code>01 10 00 42 00 01 02 00 01 68 B2</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data CRC16 checksum 01 10 00                         42 00                   01 02 00                         01 68              B2 <p>Return data: <code>01 10 00 42 00 01 A1 DD</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         42 00                   01 A1              DD <p>First write the AD internal code into the Nth point internal code value register; then write the Nth point weight value to the register; then write 0x01 to this register, the module will insert the data into the internal multi-point correction data table; the data table supports a maximum of 50 points (economy type is 10 points), the register is write-only; read return 0</p>"},{"location":"basic-config/","title":"\u57fa\u672c\u914d\u7f6e","text":""},{"location":"basic-config/#00-module-address","title":"<code>00</code> Module address","text":"<p>When 2 or more transmitters/meter are connected to the upper unit, each transmitter/meter must be set to a different address.</p> <p>Command: <code>01 10 00 00 00 01 02 00 02 27 91</code> (unlocked before use) Code format when address is changed from 01 to 02</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                        00 00                  01 02 00             02 27              91 <p>Return data: <code>01 10 00 00 00 01 01 C9</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                        00 00                  01 01              C9"},{"location":"basic-config/#01-baud-rate-setting","title":"<code>01</code> Baud rate setting","text":"<p>The default baud rate of the transmitter is 0x03:9600 when it is shipped from the factory, and it is changed to 0x07:115200 with the following input format.</p> <p>Command: <code>01 10 00 01 00 01 02 00 07 E6 43</code>, selects the system baud rate to 115200 after manually sending the command (unlocked before use)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         01 00                   01 02 00             07 E6              43 <p>Return data: <code>01 10 00 01 00 01 50 09 (the answered data is returned</code> after the transmitter/meter is switched to the new baud rate, if the host computer is not switched to the new baud rate in time, the data cannot be received)</p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         01 00                   01 50              09"},{"location":"basic-config/#02-data-frame-format","title":"<code>02</code> Data frame format","text":"<p>The transmitter defaults to the 05 (8 data bits, no parity, 1 stop bit) option format when shipped from the factory, and when modified to the 6 (8 data bits, no parity, 2 stop bits) option</p> <p>Command: <code>01 10 00 02 00 01 02 00 06 27 B0</code>, manually send the command after the parity bit, data bit, stop bit in the upper computer set to the contents of the 4 (need to be unlocked before use)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         02 00                   01 02 00             06 27              B0 <p>Return data: <code>01 10 00 02 00 01 A0 09</code> (the answered data is returned after the transmitter is switched to the new data frame format; if the host computer does not switch to the new data frame format in time, the data cannot be received)</p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         02 00                   01 A0              09"},{"location":"basic-config/#03-protocol-type-setting","title":"<code>03</code> Protocol type setting","text":"<p>Transmitter/instrument default protocol is Modbus RTU, if the protocol is changed to free protocol (unlocked before use)</p> <p>Command: <code>01 10 00 03 00 01 02 00 00 A6 63</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         03 00                   01 02 00             00 A6              63 <p>Return data: <code>01 10 00 03 00 01 F1 C9</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         03 00                   01 F1              C9 <p>00 (Free Protocol), 01 (Modbus RTU), 02 (ASCII), after the protocol type is switched, the previously modified calibration parameters and other modified parameters are retained, but the digital frame format will be restored to the default value.</p>"},{"location":"basic-config/#04-command-response-delay-setting","title":"<code>04</code> Command response delay setting","text":"<p>When the delay is 10ms, it is converted to 0A in hexadecimal.</p> <p>Command: <code>01 10 00 04 00 01 02 00 0A 27 D3</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         04 00                   01 02 00             0A 27              D3 <p>Return data: <code>01 10 00 04 00 01 40 08</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         04 00                   01 40              08 <p>The unit is ms, the answer delay is used for RS485 communication, because RS485 is half-duplex, can only send or receive, can not send and receive at the same time. Some hosts are slow to switch between sending and receiving, resulting in the loss of the answer command, so the answer delay time can be reasonably set to avoid the loss of the command.</p>"},{"location":"basic-config/#05-lockingunlocking-system-configuration","title":"<code>05</code> Locking/Unlocking System Configuration","text":"<p>Command: <code>01 10 00 05 00 01 02 5A A5 5C DE</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         05 00                   01 02 5A             A5 5C              DE <p>Return data: <code>01 10 00 05 00 01 11 C8</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         05 00                   01 11              C8 <p>Prevents accidental modification of the system configuration due to erroneous commands received during module operation. Once the configuration is locked, the module will not be able to receive external serial port commands for modification until the lock is lifted.  Including: module address, baud rate, digital frame format, protocol type, restore factory settings and other registers. Write <code>0x5AA5</code> Unlocks the system configuration; writing any other value locks the system configuration; reading this register will return 0.</p> <p>\u203bThe transmitter/instrument is locked by default after powering up.</p>"},{"location":"basic-config/#06-firmware-version","title":"<code>06</code> Firmware version","text":"<p>Returns the module\\'s internal program version number to the host computer, which varies for each transmitter/instrument depending on the model and when it left the factory.</p> <p>Command: <code>01 03 00 06 00 01 64 0B</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 03 00                         06 00                   01 64              0B <p>Return data: <code>01 03 02 00 FA 38 07</code></p> module address function code byte count High 16-bit register data CRC16 checksum 01 03 02 00                         FA 38              07"},{"location":"basic-config/#07-restoration-of-factory-settings","title":"<code>07</code> Restoration of factory settings","text":"<p>Command: <code>01 10 00 07 00 01 02 00 55 67 D8</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         07 00                   01 02 00             55 67              D8 <p>Return data: <code>01 10 00 07 00 01 B0 08</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         07 00                   01 B0              08 <p>Note that this operation will delete all user setup parameters and calibration results inside the transmitter and is not recoverable, so please use with caution!</p>"},{"location":"calibration/","title":"\u6821\u51c6","text":""},{"location":"calibration/#38-zero-point-calibration","title":"<code>38</code> Zero point calibration","text":"<p>Command: <code>01 10 00 26 00 02 04 00 00 00 00 71 9D</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         26 00                   02 04 00                         00 00                        00 71              9D <p>Return data: <code>01 10 00 26 00 02 A0 03</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         26 00                   02 A0              03"},{"location":"calibration/#42-gain-weights-calibration","title":"<code>42</code> Gain weights calibration","text":"<p>Command: <code>01 10 00 2A 00 02 04 4E 20 27 10 16 7D</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         2A 00                   02 04 4E                         20 27                        10 16              7D <p>Return data: <code>01 10 00 2A 00 02 60 00</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         2A 00                   02 60              00 <p>Place a weight and enter the value you want to calibrate, for example, place a 1KG weight on a 10KG pressure sensor and set the weight weight value to 1000. when the calibration is done, place a 2KG weight on the pressure sensor and the measured value read is 2000.</p>"},{"location":"calibration/#46-sensor-sensitivity","title":"<code>46</code> Sensor sensitivity","text":"<p>If the sensitivity of the sensor is 2.000mv/V, write 20000 (keep 4 digits after the decimal point), 20000 is converted to hexadecimal as 4E20.</p> <p>Command: <code>01 10 00 2E 00 02 04 00 00 4E 20 44 43</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         2E 00                   02 04 00                         00 4E                        20 44              43 <p>Return data: <code>01 10 00 2E 00 02 21 C1</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         2E 00                   02 21              C1"},{"location":"calibration/#48-sensor-range","title":"<code>48</code> Sensor range","text":"<p>If the sensor range is 100kg, to be accurate to 1g, enter 100000, 100000 into hexadecimal as 186A0</p> <p>Command: <code>01 10 00 30 00 02 04 00 01 86 A0 C3 63</code></p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         30 00                   02 04 00                         01 86                        A0 C3              63 <p>Return data: <code>01 10 00 30 00 02 41 C7</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         30 00                   02 41              C7"},{"location":"calibration/#60-multi-point-correction-closure","title":"<code>60</code> Multi-point correction closure","text":"<p>Command: <code>01 10 00 3C 00 01 02 00 01 62 AC</code></p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         3C 00                   01 02 00             01 62              AC <p>Return data: <code>01 10 00 3C 00 01 C1 C5</code></p> module address Register Starting Address Number of registers CRC16 checksum 01 00                         3C 00                   01 C1              C5 <p>This register is write-only, writing any non-zero value turns off multipoint correction, reading this register will return 0</p>"},{"location":"calibration/#84-tare","title":"<code>84</code> Tare","text":"<p>Command: <code>01 10 00 54 00 02 04 00 00 00 64 F6 8B</code> (assuming a tare weight of 100)</p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         54 00                   02 04 00                         00 00                        64 F6              8B <p>Return data: <code>01 10 00 54 00 02 00 18</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         54 00                   02 00              18 <p>Tare Value;Range:-8000000\\~8000000;Write 0x7fffffff to execute auto tare</p> <p>When the item weighed by the device has a package, if we only need to weigh the item itself, we have to pre-remove the package as a tare. It is possible to physically place the package directly on the weighing platform and tare it, writing 0x7fffffff to perform the automatic tare removal. If the package is inconveniently separated and the weight of the package is known, the tare weight can be entered into the weighing device by sending a command, this is called digital tare.</p>"},{"location":"calibration/#86-setting-maximum-range","title":"<code>86</code> Setting maximum range","text":"<p>Command: <code>01 10 00 56 00 02 04 00 00 27 10 6C 85</code> (assuming 10000 is entered)</p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         56 00                   02 04 00                         00 27                        10 6C              85 <p>Return data: <code>01 10 00 56 00 02 A1 D8</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         56 00                   02 A1              D8 <p>For example: there is a weighing equipment, it can weigh the maximum weight is 100.00KG, weighing the minimum number of digital jump change is 0.02KG, then the maximum weighing of this weighing is 100.00KG, that is to say, 100.00KG is the maximum weighing of this weighing can weigh, the index value is 0.02KG, the calibration needs to be set up before the maximum weighing and indexing.</p>"},{"location":"calibration/#88-setting-the-index-value","title":"<code>88</code> Setting the index value","text":"<p>Command: <code>01 10 00 58 00 01 02 00 09 6B 4E</code> (set to 0x09:0.1)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         58 00                   01 02 00             09 6B              4E <p>Return data: <code>01 10 00 58 00 01 80 1A</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         58 00                   01 80              1A <p>The index value of the weighing platform; you need to set this value before using the weighing platform function.</p> <pre><code>0x00:0.0001 0x01:0.0002 0x02:0x0005  \n0x03:0.001 0x04:0.002 0x05:0.005  \n0x06:0.01 0x07:0.02 0x08;0.05  \n0x09:0.1 0x0A:0.2 0x0B:0.5  \n0x0C:1 0x0D:2 0x0E:5  \n0x0F:10 0x10:20 0x11:50\n</code></pre>"},{"location":"communication-settings/","title":"\u901a\u4fe1\u8bbe\u7f6e","text":""},{"location":"communication-settings/#130-analog-types","title":"<code>130</code> Analog types","text":"<p>Command: <code>01 10 00 82 00 01 02 00 00 B8 72</code> (when setting 4\\~20mA)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         82 00                   01 02 00             00 B8              72 <p>Return data: <code>01 10 00 82 00 01 A1 E1</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         82 00                   01 A1              E1"},{"location":"communication-settings/#131-output-data-types","title":"<code>131</code> Output data types","text":"<p>Command: <code>01 10 00 83 00 01 02 00 01 78 63</code> (when setting gross weight value)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         83 00                   01 02 00             01 78              63 <p>Return data: <code>01 10 00 83 00 01 F0 21</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         83 00                   01 F0              21"},{"location":"communication-settings/#132-first-point-analog","title":"<code>132</code> First point analog","text":"<p>Command: <code>01 10 00 84 00 01 02 0F A0 BD 9C</code> (4000 for 4mA setting)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         84 00                   01 02 0F             A0 BD              9C <p>Return data: <code>01 10 00 84 00 01 41 E0</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         84 00                   01 41              E0"},{"location":"communication-settings/#133-first-point-analog-correction","title":"<code>133</code> First point analog correction","text":"<p>Command: <code>01 10 00 85 00 01 02 00 64 B8 2E</code> (fill in 100 when setting 0.1mA)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         85 00                   01 02 00             64 B8              2E <p>Return data: <code>01 10 00 85 00 01 10 20</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         85 00                   01 10              20"},{"location":"communication-settings/#134-first-point-weight-value","title":"<code>134</code> First point weight value","text":"<p>Command: <code>01 10 00 86 00 02 04 00 00 00 00 7B E5</code> (when setting full scale 0g)</p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         86 00                   02 04 00                         00 00                       00 7B              E5 <p>Return data: <code>01 10 00 86 00 02 A0 21</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         86 00                   02 A0              21"},{"location":"communication-settings/#136-second-point-analog","title":"<code>136</code> Second point analog","text":"<p>Command: <code>01 10 00 88 00 01 02 4E 20 8C A0</code> (fill in 20000 when setting full scale 20mA)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         88 00                   01 02 4E             20 8C              A0 <p>Return data: <code>01 10 00 88 00 01 81 E3</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         88 00                   01 81              E3"},{"location":"communication-settings/#137-second-point-analog-correction","title":"<code>137</code> Second point analog correction","text":"<p>Command: <code>01 10 00 89 00 01 02 00 64 B8 E2</code> (fill in 100 when setting full scale 0.1mA)</p> module address function code Register Starting Address Number of registers byte count register data CRC16 checksum 01 10 00                         89 00                   01 02 00             64 B8              E2 <p>Return data: <code>01 10 00 89 00 01 D0 23</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 10 00                         89 00                   01 D0              23"},{"location":"communication-settings/#138-second-point-weight-value","title":"<code>138</code> Second point weight value","text":"<p>Command: <code>01 10 00 8A 00 02 04 00 00 27 10 61 8C</code> (when setting full scale 10000g)</p> module address function code Register Starting Address Number of registers byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 10 00                         8A 00                   02 04 00                         00 27                       10 61              8C <p>Return data: <code>01 10 00 8A 00 02 60 22</code></p> module address function code Register Starting Address  Number of registers  CRC16 checksum &gt; Return data varies according to actual situation)"},{"location":"status/","title":"\u7cfb\u7edf\u72b6\u6001","text":""},{"location":"status/#08-module-status","title":"<code>08</code> Module status","text":"<p>(Supported by V1.1 firmware and above)</p> <p>Command: <code>01 03 00 08 00 01 05 C8</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 03 00                         08 00                   01 05              C8 <p>Return data: <code>01 03 02 08 02 3E 45</code></p> module address function code bytes digital CRC16 checksum 01 03 02 08       02 3E              45 <p>The return data is 0802, 0802 is hexadecimal data, convert 0802 to binary, the data obtained is 0000100000000010.</p> Bit15-Bit12 Bit2-0 binary data 0000 010 decimal system 0000 2 corresponding state 2 decimal places bit description 0 1 11 sensing Peak Not Detected Detected 10 Trough valley not detected detected 9 normalcy normal overload (V1.3) 8 routine General Smart Sensor 7 zero Non-Zero Zero 6 overflow normal overflow 5 stabilise stable unstable 4 Power power on not cleared power on cleared 3 positive plus sign minus sign"},{"location":"status/#30-reading-the-measured-value","title":"<code>30</code> Reading the measured value","text":"<p>Command: <code>01 03 00 1E 00 02 A4 0D</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 03 00                         1E 00                   02 A4              0D <p>Return data: <code>01 03 04 00 00 01 62 7A 4A</code> (data varies according to the actual situation)</p> module address function code byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 03 04 00                         00 01                        62 7A              4A <p>The measured value is the AD internal code value calibrated and converted by zero and gain.</p>"},{"location":"status/#44-reading-ad-internal-code","title":"<code>44</code> Reading AD internal code","text":"<p>Command: <code>01 03 00 2C 00 02 05 C2</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 03 00                         2C 00                   02 05              C2 <p>Return data: <code>01 03 04 00 19 3B 67 79 2E</code> (data vary according to the actual situation)</p> module address function code byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 03 04 00                         19 3B                        67 79              2E <p>The module returns the current AD internal code value to the host.</p>"},{"location":"status/#80-reading-of-weightsmeasurements","title":"<code>80</code> Reading of weights/measurements","text":"<p>Command: <code>01 03 00 50 00 02 C4 1A</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 03 00                         50 00                   02 C4              1A <p>Return data: <code>01 03 04 00 00 00 00 84 FA 50</code> (data varies according to the actual situation)</p> module address function code byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 03 04 00                         00 00                        84 FA              50"},{"location":"status/#82-net-weight-reading","title":"<code>82</code> Net weight reading","text":"<p>Command: <code>01 03 00 52 00 02 65 DA</code></p> module address function code Register Starting Address Number of registers CRC16 checksum 01 03 00                         52 00                   02 65              DA <p>Return data: <code>01 03 04 FF FF C1 EF EA 0B</code> (data vary according to the actual situation)</p> module address function code byte count High 16-bit register data Low 16-bit register data CRC16 checksum 01 03 04 FF                         FF C1                        EF EA              OB <p>Net Weight= Weight-Tare</p>"}]}